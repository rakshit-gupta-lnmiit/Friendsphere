{"ast":null,"code":"import { GLOBALTYPES, EditData, DeleteData } from \"./globalTypes\";\nimport { POST_TYPES } from \"./postAction\";\nimport { createNotify, removeNotify } from \"./notifyAction\";\nimport { postDataAPI, patchDataAPI, deleteDataAPI } from \"../../utils/fetchData\";\nexport const createComment = ({\n  post,\n  newComment,\n  auth,\n  socket\n}) => async dispatch => {\n  const newPost = {\n    ...post,\n    comments: [...post.comments, newComment]\n  };\n  dispatch({\n    type: POST_TYPES.UPDATE_POST,\n    payload: newPost\n  });\n  try {\n    const data = {\n      ...newComment,\n      postId: post._id,\n      postUserId: post.user._id\n    };\n    const res = await postDataAPI(\"comment\", data, auth.token);\n    const newData = {\n      ...res.data.newComment,\n      user: auth.user\n    };\n    const newPost = {\n      ...post,\n      comments: [...post.comments, newData]\n    };\n    dispatch({\n      type: POST_TYPES.UPDATE_POST,\n      payload: newPost\n    });\n\n    // todo socket\n    socket.emit(\"createComment\", newPost);\n\n    // todo notification\n    const msg = {\n      id: res.data.newComment._id,\n      text: newComment.reply ? \"mentioned you in a comment.\" : \"commented on your post.\",\n      recipients: newComment.reply ? [newComment.tag._id] : [post.user._id],\n      url: `/post/${post._id}`,\n      content: newComment.reply ? newComment.content : post.content,\n      image: post.images[0].url\n    };\n    dispatch(createNotify({\n      msg,\n      auth,\n      socket\n    }));\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const updateComment = ({\n  comment,\n  post,\n  content,\n  auth\n}) => async dispatch => {\n  const newComments = EditData(post.comments, comment._id, {\n    ...comment,\n    content\n  });\n  const newPost = {\n    ...post,\n    comments: newComments\n  };\n  dispatch({\n    type: POST_TYPES.UPDATE_POST,\n    payload: newPost\n  });\n  try {\n    await patchDataAPI(`comment/${comment._id}`, {\n      content\n    }, auth.token);\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const likeComment = ({\n  comment,\n  post,\n  auth\n}) => async dispatch => {\n  const newComment = {\n    ...comment,\n    likes: [...comment.likes, auth.user]\n  };\n  const newComments = EditData(post.comments, comment._id, newComment);\n  const newPost = {\n    ...post,\n    comments: newComments\n  };\n  dispatch({\n    type: POST_TYPES.UPDATE_POST,\n    payload: newPost\n  });\n  try {\n    await patchDataAPI(`comment/${comment._id}/like`, null, auth.token);\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const unLikeComment = ({\n  comment,\n  post,\n  auth\n}) => async dispatch => {\n  const newComment = {\n    ...comment,\n    likes: DeleteData(comment.likes, auth.user._id)\n  };\n  const newComments = EditData(post.comments, comment._id, newComment);\n  const newPost = {\n    ...post,\n    comments: newComments\n  };\n  dispatch({\n    type: POST_TYPES.UPDATE_POST,\n    payload: newPost\n  });\n  try {\n    await patchDataAPI(`comment/${comment._id}/unlike`, null, auth.token);\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const deleteComment = ({\n  post,\n  comment,\n  auth,\n  socket\n}) => async dispatch => {\n  const deleteArr = [...post.comments.filter(cm => cm.reply === comment._id), comment];\n  const newPost = {\n    ...post,\n    comments: post.comments.filter(cm => !deleteArr.find(da => cm._id === da._id))\n  };\n  dispatch({\n    type: POST_TYPES.UPDATE_POST,\n    payload: newPost\n  });\n  socket.emit('deleteComment', newPost);\n  try {\n    deleteArr.forEach(item => {\n      deleteDataAPI(`comment/${item._id}`, auth.token);\n\n      // todo notification\n      const msg = {\n        id: item._id,\n        text: item.reply ? \"mentioned you in a comment.\" : \"commented on your post.\",\n        recipients: item.reply ? [item.tag._id] : [post.user._id],\n        url: `/post/${post._id}`\n      };\n      dispatch(removeNotify({\n        msg,\n        auth,\n        socket\n      }));\n    });\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};","map":{"version":3,"names":["GLOBALTYPES","EditData","DeleteData","POST_TYPES","createNotify","removeNotify","postDataAPI","patchDataAPI","deleteDataAPI","createComment","post","newComment","auth","socket","dispatch","newPost","comments","type","UPDATE_POST","payload","data","postId","_id","postUserId","user","res","token","newData","emit","msg","id","text","reply","recipients","tag","url","content","image","images","err","ALERT","error","response","updateComment","comment","newComments","likeComment","likes","unLikeComment","deleteComment","deleteArr","filter","cm","find","da","forEach","item"],"sources":["C:/Users/Dell/Desktop/sem3/friends/frontend/src/redux/actions/commentAction.js"],"sourcesContent":["import { GLOBALTYPES, EditData, DeleteData } from \"./globalTypes\";\nimport { POST_TYPES } from \"./postAction\";\nimport { createNotify, removeNotify } from \"./notifyAction\";\nimport { postDataAPI, patchDataAPI, deleteDataAPI } from \"../../utils/fetchData\";\n\n\n\n\nexport const createComment = ({post, newComment, auth, socket}) => async (dispatch) => {\n    const newPost = {...post, comments: [...post.comments, newComment]};\n    \n    dispatch({type: POST_TYPES.UPDATE_POST, payload: newPost});\n\n    try {\n      const data = {\n        ...newComment,\n        postId: post._id,\n        postUserId: post.user._id,\n      };\n      const res = await postDataAPI(\"comment\", data, auth.token);\n\n      const newData = { ...res.data.newComment, user: auth.user };\n      const newPost = { ...post, comments: [...post.comments, newData] };\n      dispatch({ type: POST_TYPES.UPDATE_POST, payload: newPost });\n\n      // todo socket\n      socket.emit(\"createComment\", newPost);\n\n      // todo notification\n      const msg = {\n        id: res.data.newComment._id,\n        text: newComment.reply\n          ? \"mentioned you in a comment.\"\n          : \"commented on your post.\",\n        recipients: newComment.reply ? [newComment.tag._id] : [post.user._id],\n        url: `/post/${post._id}`,\n        content: newComment.reply\n          ? newComment.content\n          : post.content,\n        image: post.images[0].url,\n      };\n\n      dispatch(createNotify({ msg, auth, socket }));\n    } catch (err) {\n        dispatch({type: GLOBALTYPES.ALERT, payload: {error: err.response.data.msg}});\n    }\n};\n\n\nexport const updateComment = ({comment, post, content, auth}) => async (dispatch) => {\n  const newComments = EditData(post.comments, comment._id, {...comment, content});\n  const newPost = {...post, comments: newComments};\n  \n  dispatch({type: POST_TYPES.UPDATE_POST, payload: newPost});\n\n  try {\n    await patchDataAPI(`comment/${comment._id}`, { content }, auth.token);\n\n  } catch (err) {\n    dispatch({type: GLOBALTYPES.ALERT, payload: {error: err.response.data.msg}});\n  }\n};\n\nexport const likeComment= ({comment, post, auth}) => async (dispatch) => {\n    const newComment = {...comment, likes: [...comment.likes, auth.user]};\n     const newComments = EditData(post.comments, comment._id, newComment);\n     const newPost = { ...post, comments: newComments };\n\n    dispatch({ type: POST_TYPES.UPDATE_POST, payload: newPost });\n    try {\n        await patchDataAPI(`comment/${comment._id}/like`, null, auth.token);\n    } catch (err) {\n        dispatch({type: GLOBALTYPES.ALERT, payload: {error: err.response.data.msg}});\n\n    }\n};\n\nexport const unLikeComment = ({ comment, post, auth }) => async (dispatch) => {\n  const newComment = { ...comment, likes: DeleteData(comment.likes, auth.user._id) };\n  const newComments = EditData(post.comments, comment._id, newComment);\n  const newPost = { ...post, comments: newComments };\n\n  dispatch({ type: POST_TYPES.UPDATE_POST, payload: newPost });\n  try {\n    await patchDataAPI(`comment/${comment._id}/unlike`, null, auth.token);\n\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: { error: err.response.data.msg },\n    });\n  }\n};\n\n\nexport const deleteComment = ({ post, comment, auth, socket }) => async (dispatch) => {\n  const deleteArr = [...post.comments.filter(cm => cm.reply === comment._id), comment];\n\n  const newPost = {\n    ...post,\n    comments: post.comments.filter(cm => !deleteArr.find(da => cm._id === da._id))\n  }\n\n  dispatch({type: POST_TYPES.UPDATE_POST, payload: newPost});\n\n  socket.emit('deleteComment', newPost);\n\n  try {\n    deleteArr.forEach(item => {\n      deleteDataAPI(`comment/${item._id}`, auth.token);\n\n      // todo notification\n      const msg = {\n        id: item._id,\n        text: item.reply\n          ? \"mentioned you in a comment.\"\n          : \"commented on your post.\",\n        recipients: item.reply ? [item.tag._id] : [post.user._id],\n        url: `/post/${post._id}`,\n      };\n\n      dispatch(removeNotify({ msg, auth, socket }));\n    })\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: { error: err.response.data.msg },\n    });\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}