{"ast":null,"code":"import { GLOBALTYPES } from \"./globalTypes\";\nimport { postDataAPI, getDataAPI } from \"../../utils/fetchData\";\nexport const MESSAGE_TYPES = {\n  ADD_USER: \"ADD_USER\",\n  ADD_MESSAGE: \"ADD_MESSAGE\",\n  GET_CONVERSATIONS: \"GET_CONVERSATIONS\",\n  GET_MESSAGES: \"GET_MESSAGES\"\n};\nexport const addUser = ({\n  user,\n  message\n}) => async dispatch => {\n  if (message.users.every(item => item._id !== user._id)) {\n    dispatch({\n      type: MESSAGE_TYPES.ADD_USER,\n      payload: {\n        ...user,\n        text: '',\n        media: []\n      }\n    });\n  }\n};\nexport const addMessage = ({\n  msg,\n  auth,\n  socket\n}) => async dispatch => {\n  dispatch({\n    type: MESSAGE_TYPES.ADD_MESSAGE,\n    payload: msg\n  });\n  // socket.emit('addMessage', msg);\n\n  try {\n    await postDataAPI('message', msg, auth.token);\n  } catch (err) {\n    console.log(err);\n    // dispatch({ type: GLOBALTYPES.ALERT, payload: {error: err.response.data.msg } });\n  }\n};\nexport const getConversations = ({\n  auth,\n  page = 1\n}) => async dispatch => {\n  try {\n    const res = await getDataAPI(`conversations?limit=${page * 9}`, auth.token);\n    let newArr = [];\n    res.data.conversations.forEach(item => {\n      item.recipients.forEach(cv => {\n        if (cv._id !== auth.user._id) {\n          newArr.push({\n            ...cv,\n            text: item.text,\n            media: item.media\n          });\n        }\n      });\n    });\n\n    // dispatch({ type: MESSAGE_TYPES.GET_CONVERSATIONS, payload: {newArr, result: res.data.result} });\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const getMessages = ({\n  auth,\n  id,\n  page = 1\n}) => async dispatch => {\n  try {\n    const res = await getDataAPI(`message/${id}?limit=${page * 9}`, auth.token);\n    dispatch({\n      type: MESSAGE_TYPES.GET_MESSAGES,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};","map":{"version":3,"names":["GLOBALTYPES","postDataAPI","getDataAPI","MESSAGE_TYPES","ADD_USER","ADD_MESSAGE","GET_CONVERSATIONS","GET_MESSAGES","addUser","user","message","dispatch","users","every","item","_id","type","payload","text","media","addMessage","msg","auth","socket","token","err","console","log","getConversations","page","res","newArr","data","conversations","forEach","recipients","cv","push","ALERT","error","response","getMessages","id"],"sources":["C:/Users/Dell/Desktop/sem3/friends/frontend/src/redux/actions/messageAction.js"],"sourcesContent":["import { GLOBALTYPES } from \"./globalTypes\";\r\nimport { postDataAPI, getDataAPI } from \"../../utils/fetchData\";\r\n\r\n\r\nexport const MESSAGE_TYPES = {\r\n  ADD_USER: \"ADD_USER\",\r\n  ADD_MESSAGE: \"ADD_MESSAGE\",\r\n  GET_CONVERSATIONS: \"GET_CONVERSATIONS\",\r\n  GET_MESSAGES: \"GET_MESSAGES\",\r\n};\r\n\r\nexport const addUser = ({ user, message }) => async (dispatch) => {\r\n    if(message.users.every(item => item._id !== user._id)){\r\n        dispatch({type: MESSAGE_TYPES.ADD_USER, payload: {...user, text: '', media: []} });\r\n    }\r\n};\r\n\r\nexport const addMessage = ({ msg, auth, socket }) => async (dispatch) => {\r\n\r\n  dispatch({type: MESSAGE_TYPES.ADD_MESSAGE, payload: msg});\r\n  // socket.emit('addMessage', msg);\r\n\r\n  try {\r\n    await postDataAPI('message', msg, auth.token) \r\n  } catch (err) {\r\n    console.log(err)\r\n    // dispatch({ type: GLOBALTYPES.ALERT, payload: {error: err.response.data.msg } });\r\n  }\r\n}\r\n\r\nexport const getConversations = ({auth, page = 1 }) => async (dispatch) => {\r\ntry {\r\n    const res = await getDataAPI(`conversations?limit=${page * 9}`, auth.token);\r\n    let newArr = [];\r\n    res.data.conversations.forEach(item => {\r\n      item.recipients.forEach(cv => {\r\n        if(cv._id !== auth.user._id){\r\n          newArr.push({...cv, text: item.text, media: item.media});\r\n        }\r\n      })\r\n    });\r\n\r\n    // dispatch({ type: MESSAGE_TYPES.GET_CONVERSATIONS, payload: {newArr, result: res.data.result} });\r\n  } catch (err) {\r\n    dispatch({ type: GLOBALTYPES.ALERT, payload: {error: err.response.data.msg } });\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\nexport const getMessages = ({ auth, id, page = 1 }) => async (dispatch) => {\r\n  try {\r\n    const res = await getDataAPI(`message/${id}?limit=${page * 9}`, auth.token);\r\n\r\n    dispatch({ type: MESSAGE_TYPES.GET_MESSAGES, payload: res.data });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: GLOBALTYPES.ALERT,\r\n      payload: { error: err.response.data.msg },\r\n    });\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}