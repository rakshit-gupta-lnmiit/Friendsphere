{"ast":null,"code":"import { GLOBALTYPES } from './globalTypes';\nimport { postDataAPI, deleteDataAPI, getDataAPI, patchDataAPI } from '../../utils/fetchData';\nexport const NOTIFY_TYPES = {\n  GET_NOTIFIES: \"GET_NOTIFIES\",\n  CREATE_NOTIFY: \"CREATE_NOTIFY\",\n  REMOVE_NOTIFY: \"REMOVE_NOTIFY\",\n  UPDATE_NOTIFY: \"UPDATE_NOTIFY\",\n  UPDATE_SOUND: \"UPDATE_SOUND\",\n  DELETE_ALL_NOTIFICATIONS: \"DELETE_ALL_NOTIFICATIONS\"\n};\nexport const createNotify = ({\n  msg,\n  auth,\n  socket\n}) => async dispatch => {\n  try {\n    const res = await postDataAPI(`notify`, msg, auth.token);\n    socket.emit('createNotify', {\n      ...res.data.notify,\n      user: {\n        username: auth.user.username,\n        avatar: auth.user.avatar\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const removeNotify = ({\n  msg,\n  auth,\n  socket\n}) => async dispatch => {\n  try {\n    await deleteDataAPI(`notify/${msg.id}?url=${msg.url}`, auth.token);\n    socket.emit(\"removeNotify\", msg);\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const getNotifies = token => async dispatch => {\n  try {\n    const res = await getDataAPI('notifies', token);\n    dispatch({\n      type: NOTIFY_TYPES.GET_NOTIFIES,\n      payload: res.data.notifies\n    });\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const isReadNotify = ({\n  msg,\n  auth\n}) => async dispatch => {\n  dispatch({\n    type: NOTIFY_TYPES.UPDATE_NOTIFY,\n    payload: {\n      ...msg,\n      isRead: true\n    }\n  });\n  try {\n    await patchDataAPI(`isReadNotify/${msg._id}`, null, auth.token);\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const deleteAllNotifies = token => async dispatch => {\n  dispatch({\n    type: NOTIFY_TYPES.DELETE_ALL_NOTIFICATIONS,\n    payload: []\n  });\n  try {\n    await deleteDataAPI(`deleteAllNotify`, token);\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};","map":{"version":3,"names":["GLOBALTYPES","postDataAPI","deleteDataAPI","getDataAPI","patchDataAPI","NOTIFY_TYPES","GET_NOTIFIES","CREATE_NOTIFY","REMOVE_NOTIFY","UPDATE_NOTIFY","UPDATE_SOUND","DELETE_ALL_NOTIFICATIONS","createNotify","msg","auth","socket","dispatch","res","token","emit","data","notify","user","username","avatar","err","type","ALERT","payload","error","response","removeNotify","id","url","getNotifies","notifies","isReadNotify","isRead","_id","deleteAllNotifies"],"sources":["C:/Users/Dell/Desktop/sem3/friends/frontend/src/redux/actions/notifyAction.js"],"sourcesContent":["import { GLOBALTYPES } from './globalTypes';\r\nimport { postDataAPI, deleteDataAPI, getDataAPI, patchDataAPI } from '../../utils/fetchData';\r\n\r\nexport const NOTIFY_TYPES = {\r\n  GET_NOTIFIES: \"GET_NOTIFIES\",\r\n  CREATE_NOTIFY: \"CREATE_NOTIFY\",\r\n  REMOVE_NOTIFY: \"REMOVE_NOTIFY\",\r\n  UPDATE_NOTIFY: \"UPDATE_NOTIFY\",\r\n  UPDATE_SOUND: \"UPDATE_SOUND\",\r\n  DELETE_ALL_NOTIFICATIONS: \"DELETE_ALL_NOTIFICATIONS\",\r\n};\r\n\r\nexport const createNotify = ({msg, auth, socket }) => async (dispatch) => {\r\n\r\n    try {\r\n        const res = await postDataAPI(`notify`, msg, auth.token);\r\n        socket.emit('createNotify', {\r\n          ...res.data.notify,\r\n          user: {\r\n            username: auth.user.username,\r\n            avatar: auth.user.avatar,\r\n          }\r\n        });\r\n    } catch (err) {\r\n        dispatch({type: GLOBALTYPES.ALERT, payload: {error: err.response.data.msg} })\r\n    }\r\n};\r\n\r\nexport const removeNotify = ({ msg, auth, socket }) => async (dispatch) => {\r\n  try {\r\n    await deleteDataAPI(`notify/${msg.id}?url=${msg.url}`, auth.token);\r\n    socket.emit(\"removeNotify\", msg);\r\n  } catch (err) {\r\n    dispatch({\r\n      type: GLOBALTYPES.ALERT,\r\n      payload: { error: err.response.data.msg },\r\n    });\r\n  }\r\n};\r\n\r\nexport const getNotifies = (token) => async (dispatch) => {\r\n  try {\r\n    const res = await getDataAPI('notifies', token);\r\n    \r\n    dispatch({type: NOTIFY_TYPES.GET_NOTIFIES, payload: res.data.notifies});\r\n    \r\n  } catch (err) {\r\n    dispatch({\r\n      type: GLOBALTYPES.ALERT,\r\n      payload: { error: err.response.data.msg },\r\n    });\r\n  }\r\n};\r\n\r\nexport const isReadNotify = ({msg, auth}) => async (dispatch) => {\r\n\r\n  dispatch({type: NOTIFY_TYPES.UPDATE_NOTIFY, payload: {...msg, isRead: true} });\r\n\r\n  try {\r\n    await patchDataAPI(`isReadNotify/${msg._id}`,null, auth.token);\r\n  } catch (err) {\r\n    dispatch({\r\n      type: GLOBALTYPES.ALERT,\r\n      payload: { error: err.response.data.msg },\r\n    });\r\n  }\r\n};\r\n\r\nexport const deleteAllNotifies = (token) => async (dispatch) => {\r\n  dispatch({ type: NOTIFY_TYPES.DELETE_ALL_NOTIFICATIONS, payload: [] });\r\n\r\n  try {\r\n    await deleteDataAPI(`deleteAllNotify`, token);\r\n  } catch (err) {\r\n    dispatch({\r\n      type: GLOBALTYPES.ALERT,\r\n      payload: { error: err.response.data.msg },\r\n    });\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}